
counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000029c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000029c  00000330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080007e  0080007e  0000034e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c7  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d5  00000000  00000000  00000abb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000295  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001328  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000368  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000288  00000000  00000000  0000175c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_8>
  24:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  8a:	0c 94 4c 01 	jmp	0x298	; 0x298 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_8>:
	TCNT0 = timer0_initial_value;
	showSegment(lcd_index);
	lcd_index= (lcd_index+1)%4 ;
}

ISR(TIMER1_OVF_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	5f 93       	push	r21
  9e:	6f 93       	push	r22
  a0:	7f 93       	push	r23
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
  a6:	af 93       	push	r26
  a8:	bf 93       	push	r27
	TCNT1 = timer1_initial_value;
  aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ae:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b2:	9d bd       	out	0x2d, r25	; 45
  b4:	8c bd       	out	0x2c, r24	; 44
	count= (count+1)%10000;
  b6:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <count>
  ba:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <count+0x1>
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	60 e1       	ldi	r22, 0x10	; 16
  c2:	77 e2       	ldi	r23, 0x27	; 39
  c4:	0e 94 24 01 	call	0x248	; 0x248 <__divmodhi4>
  c8:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <count+0x1>
  cc:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <count>
}
  d0:	bf 91       	pop	r27
  d2:	af 91       	pop	r26
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	7f 91       	pop	r23
  da:	6f 91       	pop	r22
  dc:	5f 91       	pop	r21
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <main>:

int main(void)
{
    DDRD = 0xFF;
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	81 bb       	out	0x11, r24	; 17
	DDRC=0xFF;
  ec:	84 bb       	out	0x14, r24	; 20
	PORTC=255;
  ee:	85 bb       	out	0x15, r24	; 21
	TCCR0 = (1<<CS00);
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	83 bf       	out	0x33, r24	; 51
	TCCR1B = ((1<<CS11) | (1<<CS10));
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << TOIE1) | (1 << TOIE0); // Enable Timer1 & Timer2 OverFlow Interrupt
  f8:	89 b7       	in	r24, 0x39	; 57
  fa:	85 60       	ori	r24, 0x05	; 5
  fc:	89 bf       	out	0x39, r24	; 57
	sei();
  fe:	78 94       	sei
	count = 0;
 100:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <count+0x1>
 104:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <count>
 108:	ff cf       	rjmp	.-2      	; 0x108 <main+0x20>

0000010a <showSegment>:
    }
}

void showSegment(int lcd_index){
	int index;
	if (lcd_index == 3){
 10a:	83 30       	cpi	r24, 0x03	; 3
 10c:	91 05       	cpc	r25, r1
 10e:	99 f4       	brne	.+38     	; 0x136 <showSegment+0x2c>
		index = count%10;
 110:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <count>
 114:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <count+0x1>
 118:	6a e0       	ldi	r22, 0x0A	; 10
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	0e 94 24 01 	call	0x248	; 0x248 <__divmodhi4>
		PORTD = digits[index];
 120:	fc 01       	movw	r30, r24
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	e6 59       	subi	r30, 0x96	; 150
 128:	ff 4f       	sbci	r31, 0xFF	; 255
 12a:	80 81       	ld	r24, Z
 12c:	82 bb       	out	0x12, r24	; 18
		PORTC=segments[3];
 12e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <segments+0x6>
 132:	85 bb       	out	0x15, r24	; 21
 134:	08 95       	ret
	}else if (lcd_index == 2){
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	91 05       	cpc	r25, r1
 13a:	c1 f4       	brne	.+48     	; 0x16c <showSegment+0x62>
		index = (count/10)%10;
 13c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <count>
 140:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <count+0x1>
 144:	2a e0       	ldi	r18, 0x0A	; 10
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	b9 01       	movw	r22, r18
 14a:	0e 94 24 01 	call	0x248	; 0x248 <__divmodhi4>
 14e:	cb 01       	movw	r24, r22
 150:	b9 01       	movw	r22, r18
 152:	0e 94 24 01 	call	0x248	; 0x248 <__divmodhi4>
		PORTD = digits[index];
 156:	fc 01       	movw	r30, r24
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	e6 59       	subi	r30, 0x96	; 150
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	80 81       	ld	r24, Z
 162:	82 bb       	out	0x12, r24	; 18
		PORTC=segments[2];
 164:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <segments+0x4>
 168:	85 bb       	out	0x15, r24	; 21
 16a:	08 95       	ret
	}else if (lcd_index==1){
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	c1 f4       	brne	.+48     	; 0x1a0 <showSegment+0x96>
		index = (count/100)%10;
 170:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <count>
 174:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <count+0x1>
 178:	64 e6       	ldi	r22, 0x64	; 100
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	0e 94 24 01 	call	0x248	; 0x248 <__divmodhi4>
 180:	cb 01       	movw	r24, r22
 182:	6a e0       	ldi	r22, 0x0A	; 10
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	0e 94 24 01 	call	0x248	; 0x248 <__divmodhi4>
		PORTD = digits[index];
 18a:	fc 01       	movw	r30, r24
 18c:	ee 0f       	add	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	e6 59       	subi	r30, 0x96	; 150
 192:	ff 4f       	sbci	r31, 0xFF	; 255
 194:	80 81       	ld	r24, Z
 196:	82 bb       	out	0x12, r24	; 18
		PORTC=segments[1];
 198:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <segments+0x2>
 19c:	85 bb       	out	0x15, r24	; 21
 19e:	08 95       	ret
	}else{
		index = (count/1000)%10;
 1a0:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <count>
 1a4:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <count+0x1>
 1a8:	68 ee       	ldi	r22, 0xE8	; 232
 1aa:	73 e0       	ldi	r23, 0x03	; 3
 1ac:	0e 94 24 01 	call	0x248	; 0x248 <__divmodhi4>
 1b0:	cb 01       	movw	r24, r22
 1b2:	6a e0       	ldi	r22, 0x0A	; 10
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	0e 94 24 01 	call	0x248	; 0x248 <__divmodhi4>
		PORTD = digits[index];
 1ba:	fc 01       	movw	r30, r24
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	e6 59       	subi	r30, 0x96	; 150
 1c2:	ff 4f       	sbci	r31, 0xFF	; 255
 1c4:	80 81       	ld	r24, Z
 1c6:	82 bb       	out	0x12, r24	; 18
		PORTC=segments[0];
 1c8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <segments>
 1cc:	85 bb       	out	0x15, r24	; 21
 1ce:	08 95       	ret

000001d0 <__vector_9>:
int lcd_index = 0;
int timer0_initial_value = 255-255; // 125 = ticks for 1 millisecond
int timer1_initial_value= 65535-15625;// 31250 ticks for 1 second  15625
void showSegment(int);

ISR(TIMER0_OVF_vect){
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	2f 93       	push	r18
 1dc:	3f 93       	push	r19
 1de:	4f 93       	push	r20
 1e0:	5f 93       	push	r21
 1e2:	6f 93       	push	r22
 1e4:	7f 93       	push	r23
 1e6:	8f 93       	push	r24
 1e8:	9f 93       	push	r25
 1ea:	af 93       	push	r26
 1ec:	bf 93       	push	r27
 1ee:	ef 93       	push	r30
 1f0:	ff 93       	push	r31
	TCNT0 = timer0_initial_value;
 1f2:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
 1f6:	82 bf       	out	0x32, r24	; 50
	showSegment(lcd_index);
 1f8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <lcd_index>
 1fc:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <lcd_index+0x1>
 200:	0e 94 85 00 	call	0x10a	; 0x10a <showSegment>
	lcd_index= (lcd_index+1)%4 ;
 204:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <lcd_index>
 208:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <lcd_index+0x1>
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	83 70       	andi	r24, 0x03	; 3
 210:	90 78       	andi	r25, 0x80	; 128
 212:	99 23       	and	r25, r25
 214:	24 f4       	brge	.+8      	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	8c 6f       	ori	r24, 0xFC	; 252
 21a:	9f 6f       	ori	r25, 0xFF	; 255
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <lcd_index+0x1>
 222:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <lcd_index>
}
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	bf 91       	pop	r27
 22c:	af 91       	pop	r26
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	7f 91       	pop	r23
 234:	6f 91       	pop	r22
 236:	5f 91       	pop	r21
 238:	4f 91       	pop	r20
 23a:	3f 91       	pop	r19
 23c:	2f 91       	pop	r18
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <__divmodhi4>:
 248:	97 fb       	bst	r25, 7
 24a:	07 2e       	mov	r0, r23
 24c:	16 f4       	brtc	.+4      	; 0x252 <__divmodhi4+0xa>
 24e:	00 94       	com	r0
 250:	07 d0       	rcall	.+14     	; 0x260 <__divmodhi4_neg1>
 252:	77 fd       	sbrc	r23, 7
 254:	09 d0       	rcall	.+18     	; 0x268 <__divmodhi4_neg2>
 256:	0e 94 38 01 	call	0x270	; 0x270 <__udivmodhi4>
 25a:	07 fc       	sbrc	r0, 7
 25c:	05 d0       	rcall	.+10     	; 0x268 <__divmodhi4_neg2>
 25e:	3e f4       	brtc	.+14     	; 0x26e <__divmodhi4_exit>

00000260 <__divmodhi4_neg1>:
 260:	90 95       	com	r25
 262:	81 95       	neg	r24
 264:	9f 4f       	sbci	r25, 0xFF	; 255
 266:	08 95       	ret

00000268 <__divmodhi4_neg2>:
 268:	70 95       	com	r23
 26a:	61 95       	neg	r22
 26c:	7f 4f       	sbci	r23, 0xFF	; 255

0000026e <__divmodhi4_exit>:
 26e:	08 95       	ret

00000270 <__udivmodhi4>:
 270:	aa 1b       	sub	r26, r26
 272:	bb 1b       	sub	r27, r27
 274:	51 e1       	ldi	r21, 0x11	; 17
 276:	07 c0       	rjmp	.+14     	; 0x286 <__udivmodhi4_ep>

00000278 <__udivmodhi4_loop>:
 278:	aa 1f       	adc	r26, r26
 27a:	bb 1f       	adc	r27, r27
 27c:	a6 17       	cp	r26, r22
 27e:	b7 07       	cpc	r27, r23
 280:	10 f0       	brcs	.+4      	; 0x286 <__udivmodhi4_ep>
 282:	a6 1b       	sub	r26, r22
 284:	b7 0b       	sbc	r27, r23

00000286 <__udivmodhi4_ep>:
 286:	88 1f       	adc	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	5a 95       	dec	r21
 28c:	a9 f7       	brne	.-22     	; 0x278 <__udivmodhi4_loop>
 28e:	80 95       	com	r24
 290:	90 95       	com	r25
 292:	bc 01       	movw	r22, r24
 294:	cd 01       	movw	r24, r26
 296:	08 95       	ret

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
