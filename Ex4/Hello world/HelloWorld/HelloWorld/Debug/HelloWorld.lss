
HelloWorld.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b2a  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b1  00000000  00000000  00000d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000486  00000000  00000000  0000140f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00001898  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ed  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004c9  00000000  00000000  00001d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002252  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  64:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LCD_CmdWrite>:
        LCD_DataWrite(BlankSpace);              //then display blank spaces
 
       _delay_ms(500);
    }
   LCD_CmdWrite(0x0E);			  //Enable the Cursor
  6c:	85 bb       	out	0x15, r24	; 21
  6e:	82 b3       	in	r24, 0x12	; 18
  70:	8f 7d       	andi	r24, 0xDF	; 223
  72:	82 bb       	out	0x12, r24	; 18
  74:	82 b3       	in	r24, 0x12	; 18
  76:	8f 7b       	andi	r24, 0xBF	; 191
  78:	82 bb       	out	0x12, r24	; 18
  7a:	82 b3       	in	r24, 0x12	; 18
  7c:	80 68       	ori	r24, 0x80	; 128
  7e:	82 bb       	out	0x12, r24	; 18
  80:	00 00       	nop
  82:	82 b3       	in	r24, 0x12	; 18
  84:	8f 77       	andi	r24, 0x7F	; 127
  86:	82 bb       	out	0x12, r24	; 18
  88:	89 ef       	ldi	r24, 0xF9	; 249
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <LCD_CmdWrite+0x20>
  90:	00 c0       	rjmp	.+0      	; 0x92 <LCD_CmdWrite+0x26>
  92:	00 00       	nop
  94:	08 95       	ret

00000096 <LCD_Init>:
  96:	83 ed       	ldi	r24, 0xD3	; 211
  98:	90 e3       	ldi	r25, 0x30	; 48
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_Init+0x4>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_Init+0xa>
  a0:	00 00       	nop
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	84 bb       	out	0x14, r24	; 20
  a6:	81 bb       	out	0x11, r24	; 17
  a8:	88 e3       	ldi	r24, 0x38	; 56
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_CmdWrite>
  b0:	8e e0       	ldi	r24, 0x0E	; 14
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_CmdWrite>
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_CmdWrite>
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_CmdWrite>
  c8:	08 95       	ret

000000ca <LCD_DataWrite>:
  ca:	85 bb       	out	0x15, r24	; 21
  cc:	82 b3       	in	r24, 0x12	; 18
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	82 bb       	out	0x12, r24	; 18
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	8f 7b       	andi	r24, 0xBF	; 191
  d6:	82 bb       	out	0x12, r24	; 18
  d8:	82 b3       	in	r24, 0x12	; 18
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	82 bb       	out	0x12, r24	; 18
  de:	00 00       	nop
  e0:	82 b3       	in	r24, 0x12	; 18
  e2:	8f 77       	andi	r24, 0x7F	; 127
  e4:	82 bb       	out	0x12, r24	; 18
  e6:	89 ef       	ldi	r24, 0xF9	; 249
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_DataWrite+0x20>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_DataWrite+0x26>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <main>:
{
    /* Replace with your application code */
	char c = 'h';
    while (1) 
    {
		LCD_Init();
  f4:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Init>
		LCD_DataWrite(c);
  f8:	88 e6       	ldi	r24, 0x68	; 104
  fa:	0e 94 65 00 	call	0xca	; 0xca <LCD_DataWrite>
  fe:	fa cf       	rjmp	.-12     	; 0xf4 <main>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
