
part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000368  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000368  000003fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800064  00800064  00000400  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e64  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006cf  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065e  00000000  00000000  00001a67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  000020c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ae  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b1  00000000  00000000  00002776  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00002d27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  8a:	0c 94 b2 01 	jmp	0x364	; 0x364 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_CmdWrite>:
    LCD_DataWrite(':');
 
    LCD_DataWrite(((sec>>4) & 0x0f) + 0x30);
	LCD_DataWrite((sec & 0x0f) + 0x30);
 
  92:	85 bb       	out	0x15, r24	; 21
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8f 7d       	andi	r24, 0xDF	; 223
  98:	82 bb       	out	0x12, r24	; 18
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	8f 7b       	andi	r24, 0xBF	; 191
  9e:	82 bb       	out	0x12, r24	; 18
  a0:	82 b3       	in	r24, 0x12	; 18
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	82 bb       	out	0x12, r24	; 18
  a6:	00 00       	nop
  a8:	82 b3       	in	r24, 0x12	; 18
  aa:	8f 77       	andi	r24, 0x7F	; 127
  ac:	82 bb       	out	0x12, r24	; 18
  ae:	89 ef       	ldi	r24, 0xF9	; 249
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <LCD_CmdWrite+0x20>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <LCD_CmdWrite+0x26>
  b8:	00 00       	nop
  ba:	08 95       	ret

000000bc <LCD_Init>:
  bc:	83 ed       	ldi	r24, 0xD3	; 211
  be:	90 e3       	ldi	r25, 0x30	; 48
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <LCD_Init+0x4>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <LCD_Init+0xa>
  c6:	00 00       	nop
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	84 bb       	out	0x14, r24	; 20
  cc:	81 bb       	out	0x11, r24	; 17
  ce:	88 e3       	ldi	r24, 0x38	; 56
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
  d6:	8e e0       	ldi	r24, 0x0E	; 14
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
  e6:	80 e8       	ldi	r24, 0x80	; 128
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
  ee:	08 95       	ret

000000f0 <LCD_Clear>:
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
  f8:	80 e8       	ldi	r24, 0x80	; 128
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_CmdWrite>
 100:	08 95       	ret

00000102 <LCD_DataWrite>:
 102:	85 bb       	out	0x15, r24	; 21
 104:	82 b3       	in	r24, 0x12	; 18
 106:	80 62       	ori	r24, 0x20	; 32
 108:	82 bb       	out	0x12, r24	; 18
 10a:	82 b3       	in	r24, 0x12	; 18
 10c:	8f 7b       	andi	r24, 0xBF	; 191
 10e:	82 bb       	out	0x12, r24	; 18
 110:	82 b3       	in	r24, 0x12	; 18
 112:	80 68       	ori	r24, 0x80	; 128
 114:	82 bb       	out	0x12, r24	; 18
 116:	00 00       	nop
 118:	82 b3       	in	r24, 0x12	; 18
 11a:	8f 77       	andi	r24, 0x7F	; 127
 11c:	82 bb       	out	0x12, r24	; 18
 11e:	89 ef       	ldi	r24, 0xF9	; 249
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_DataWrite+0x20>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_DataWrite+0x26>
 128:	00 00       	nop
 12a:	08 95       	ret

0000012c <LCD_DisplayString>:
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	ec 01       	movw	r28, r24
 132:	03 c0       	rjmp	.+6      	; 0x13a <LCD_DisplayString+0xe>
 134:	21 96       	adiw	r28, 0x01	; 1
 136:	0e 94 81 00 	call	0x102	; 0x102 <LCD_DataWrite>
 13a:	88 81       	ld	r24, Y
 13c:	81 11       	cpse	r24, r1
 13e:	fa cf       	rjmp	.-12     	; 0x134 <LCD_DisplayString+0x8>
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <LCD_DisplayNumber>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	8c 01       	movw	r16, r24
 150:	9c 01       	movw	r18, r24
 152:	ad ec       	ldi	r26, 0xCD	; 205
 154:	bc ec       	ldi	r27, 0xCC	; 204
 156:	0e 94 a3 01 	call	0x346	; 0x346 <__umulhisi3>
 15a:	ec 01       	movw	r28, r24
 15c:	d6 95       	lsr	r29
 15e:	c7 95       	ror	r28
 160:	d6 95       	lsr	r29
 162:	c7 95       	ror	r28
 164:	d6 95       	lsr	r29
 166:	c7 95       	ror	r28
 168:	8c 2f       	mov	r24, r28
 16a:	80 5d       	subi	r24, 0xD0	; 208
 16c:	0e 94 81 00 	call	0x102	; 0x102 <LCD_DataWrite>
 170:	ce 01       	movw	r24, r28
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	cc 0f       	add	r28, r28
 178:	dd 1f       	adc	r29, r29
 17a:	cc 0f       	add	r28, r28
 17c:	dd 1f       	adc	r29, r29
 17e:	cc 0f       	add	r28, r28
 180:	dd 1f       	adc	r29, r29
 182:	c8 0f       	add	r28, r24
 184:	d9 1f       	adc	r29, r25
 186:	c8 01       	movw	r24, r16
 188:	8c 1b       	sub	r24, r28
 18a:	9d 0b       	sbc	r25, r29
 18c:	80 5d       	subi	r24, 0xD0	; 208
 18e:	0e 94 81 00 	call	0x102	; 0x102 <LCD_DataWrite>
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	1f 91       	pop	r17
 198:	0f 91       	pop	r16
 19a:	08 95       	ret

0000019c <displayTime>:
		
    }
}

void displayTime(){
	LCD_DisplayNumber(hour);
 19c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <hour>
 1a0:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <hour+0x1>
 1a4:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_DisplayNumber>
	LCD_DisplayString(":");
 1a8:	82 e6       	ldi	r24, 0x62	; 98
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_DisplayString>
	LCD_DisplayNumber(minute);
 1b0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <minute>
 1b4:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <minute+0x1>
 1b8:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_DisplayNumber>
	LCD_DisplayString(":");
 1bc:	82 e6       	ldi	r24, 0x62	; 98
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_DisplayString>
	LCD_DisplayNumber(second);	
 1c4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 1c8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 1cc:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_DisplayNumber>
 1d0:	08 95       	ret

000001d2 <updateDisplay>:
}

void updateDisplay(){
	LCD_Clear();
 1d2:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_Clear>
	displayTime();
 1d6:	0e 94 ce 00 	call	0x19c	; 0x19c <displayTime>
 1da:	08 95       	ret

000001dc <main>:
	TCNT1 = timer1_initial_value;
}

int main(void)
{
    	DDRD = 0xFF;
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	81 bb       	out	0x11, r24	; 17
    	DDRC=0xFF;
 1e0:	84 bb       	out	0x14, r24	; 20
    	PORTC=0x00;
 1e2:	15 ba       	out	0x15, r1	; 21
    	TCCR1B = ((1<<CS11) | (1<<CS10));
 1e4:	83 e0       	ldi	r24, 0x03	; 3
 1e6:	8e bd       	out	0x2e, r24	; 46
    	TIMSK |= (1 << TOIE1); // Enable Timer0 OverFlow Interrupt
 1e8:	89 b7       	in	r24, 0x39	; 57
 1ea:	84 60       	ori	r24, 0x04	; 4
 1ec:	89 bf       	out	0x39, r24	; 57
    	sei();
 1ee:	78 94       	sei
    	TCNT1 = timer1_initial_value;
 1f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1f4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1f8:	9d bd       	out	0x2d, r25	; 45
 1fa:	8c bd       	out	0x2c, r24	; 44
    	second = 0, minute=0,hour=0;
 1fc:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
 200:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
 204:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <minute+0x1>
 208:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <minute>
 20c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <hour+0x1>
 210:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <hour>
		LCD_Init();
 214:	0e 94 5e 00 	call	0xbc	; 0xbc <LCD_Init>
		updateDisplay();
 218:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <updateDisplay>
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__EEPROM_REGION_LENGTH__+0x1c>

0000021e <increaseSecond>:
	if(hourOverflow()==1)
		hour=0;	
}

void increaseSecond(int ticks){
	 second= second+ticks;
 21e:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <__data_end>
 222:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <__data_end+0x1>
 226:	82 0f       	add	r24, r18
 228:	93 1f       	adc	r25, r19
 22a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x1>
 22e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
 232:	08 95       	ret

00000234 <secondOverflow>:
}

int secondOverflow(){
	if(second>=60){
 234:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 238:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 23c:	cc 97       	sbiw	r24, 0x3c	; 60
 23e:	1c f0       	brlt	.+6      	; 0x246 <secondOverflow+0x12>
		return 1;
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	08 95       	ret
	}
	return -1;
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	9f ef       	ldi	r25, 0xFF	; 255
}
 24a:	08 95       	ret

0000024c <increaseMinute>:

void increaseMinute(int ticks){
	minute= minute+ticks;
 24c:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <minute>
 250:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <minute+0x1>
 254:	82 0f       	add	r24, r18
 256:	93 1f       	adc	r25, r19
 258:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <minute+0x1>
 25c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <minute>
 260:	08 95       	ret

00000262 <minuteOverflow>:
}

int minuteOverflow(){
	if(minute>=60){
 262:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <minute>
 266:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <minute+0x1>
 26a:	cc 97       	sbiw	r24, 0x3c	; 60
 26c:	1c f0       	brlt	.+6      	; 0x274 <minuteOverflow+0x12>
		return 1;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	08 95       	ret
	}
	return -1;
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	9f ef       	ldi	r25, 0xFF	; 255
}
 278:	08 95       	ret

0000027a <increaseHour>:

void increaseHour(int ticks){
	hour= hour+ticks;
 27a:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <hour>
 27e:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <hour+0x1>
 282:	82 0f       	add	r24, r18
 284:	93 1f       	adc	r25, r19
 286:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <hour+0x1>
 28a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <hour>
 28e:	08 95       	ret

00000290 <hourOverflow>:
}

int hourOverflow(){
	if(hour>=24){
 290:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <hour>
 294:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <hour+0x1>
 298:	48 97       	sbiw	r24, 0x18	; 24
 29a:	1c f0       	brlt	.+6      	; 0x2a2 <hourOverflow+0x12>
		return 1;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	08 95       	ret
	}
	return -1;
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	9f ef       	ldi	r25, 0xFF	; 255
 2a6:	08 95       	ret

000002a8 <handleClock>:
	LCD_Clear();
	displayTime();
}

void handleClock(){
	increaseSecond(1);
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 0f 01 	call	0x21e	; 0x21e <increaseSecond>
	
	if(secondOverflow()==1){
 2b0:	0e 94 1a 01 	call	0x234	; 0x234 <secondOverflow>
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	41 f4       	brne	.+16     	; 0x2c8 <handleClock+0x20>
		increaseMinute(1);
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 26 01 	call	0x24c	; 0x24c <increaseMinute>
		second = 0;		
 2c0:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
 2c4:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
	}
	if(minuteOverflow()==1){
 2c8:	0e 94 31 01 	call	0x262	; 0x262 <minuteOverflow>
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	31 f4       	brne	.+12     	; 0x2dc <handleClock+0x34>
		increaseHour();
 2d0:	0e 94 3d 01 	call	0x27a	; 0x27a <increaseHour>
		minute = 0;	
 2d4:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <minute+0x1>
 2d8:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <minute>
	}
	if(hourOverflow()==1)
 2dc:	0e 94 48 01 	call	0x290	; 0x290 <hourOverflow>
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	21 f4       	brne	.+8      	; 0x2ec <handleClock+0x44>
		hour=0;	
 2e4:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <hour+0x1>
 2e8:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <hour>
 2ec:	08 95       	ret

000002ee <__vector_8>:
int hourOverflow();
void handleClock();
void updateDisplay();
void displayTime();

ISR(TIMER1_OVF_vect){
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	2f 93       	push	r18
 2fa:	3f 93       	push	r19
 2fc:	4f 93       	push	r20
 2fe:	5f 93       	push	r21
 300:	6f 93       	push	r22
 302:	7f 93       	push	r23
 304:	8f 93       	push	r24
 306:	9f 93       	push	r25
 308:	af 93       	push	r26
 30a:	bf 93       	push	r27
 30c:	ef 93       	push	r30
 30e:	ff 93       	push	r31
	handleClock();
 310:	0e 94 54 01 	call	0x2a8	; 0x2a8 <handleClock>
	updateDisplay();
 314:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <updateDisplay>
	TCNT1 = timer1_initial_value;
 318:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 31c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 320:	9d bd       	out	0x2d, r25	; 45
 322:	8c bd       	out	0x2c, r24	; 44
}
 324:	ff 91       	pop	r31
 326:	ef 91       	pop	r30
 328:	bf 91       	pop	r27
 32a:	af 91       	pop	r26
 32c:	9f 91       	pop	r25
 32e:	8f 91       	pop	r24
 330:	7f 91       	pop	r23
 332:	6f 91       	pop	r22
 334:	5f 91       	pop	r21
 336:	4f 91       	pop	r20
 338:	3f 91       	pop	r19
 33a:	2f 91       	pop	r18
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <__umulhisi3>:
 346:	a2 9f       	mul	r26, r18
 348:	b0 01       	movw	r22, r0
 34a:	b3 9f       	mul	r27, r19
 34c:	c0 01       	movw	r24, r0
 34e:	a3 9f       	mul	r26, r19
 350:	70 0d       	add	r23, r0
 352:	81 1d       	adc	r24, r1
 354:	11 24       	eor	r1, r1
 356:	91 1d       	adc	r25, r1
 358:	b2 9f       	mul	r27, r18
 35a:	70 0d       	add	r23, r0
 35c:	81 1d       	adc	r24, r1
 35e:	11 24       	eor	r1, r1
 360:	91 1d       	adc	r25, r1
 362:	08 95       	ret

00000364 <_exit>:
 364:	f8 94       	cli

00000366 <__stop_program>:
 366:	ff cf       	rjmp	.-2      	; 0x366 <__stop_program>
