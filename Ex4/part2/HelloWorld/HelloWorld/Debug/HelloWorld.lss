
HelloWorld.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000136  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b3b  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b3  00000000  00000000  00000dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000047e  00000000  00000000  00001482  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00001900  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f7  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004c9  00000000  00000000  00001dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000022c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 92 00 	call	0x124	; 0x124 <main>
  7a:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_CmdWrite>:
        LCD_DataWrite(BlankSpace);              //then display blank spaces
 
       _delay_ms(500);
    }
   LCD_CmdWrite(0x0E);			  //Enable the Cursor
  82:	85 bb       	out	0x15, r24	; 21
  84:	82 b3       	in	r24, 0x12	; 18
  86:	8f 7d       	andi	r24, 0xDF	; 223
  88:	82 bb       	out	0x12, r24	; 18
  8a:	82 b3       	in	r24, 0x12	; 18
  8c:	8f 7b       	andi	r24, 0xBF	; 191
  8e:	82 bb       	out	0x12, r24	; 18
  90:	82 b3       	in	r24, 0x12	; 18
  92:	80 68       	ori	r24, 0x80	; 128
  94:	82 bb       	out	0x12, r24	; 18
  96:	00 00       	nop
  98:	82 b3       	in	r24, 0x12	; 18
  9a:	8f 77       	andi	r24, 0x7F	; 127
  9c:	82 bb       	out	0x12, r24	; 18
  9e:	89 ef       	ldi	r24, 0xF9	; 249
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_CmdWrite+0x20>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_CmdWrite+0x26>
  a8:	00 00       	nop
  aa:	08 95       	ret

000000ac <LCD_Init>:
  ac:	83 ed       	ldi	r24, 0xD3	; 211
  ae:	90 e3       	ldi	r25, 0x30	; 48
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <LCD_Init+0x4>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <LCD_Init+0xa>
  b6:	00 00       	nop
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 bb       	out	0x14, r24	; 20
  bc:	81 bb       	out	0x11, r24	; 17
  be:	88 e3       	ldi	r24, 0x38	; 56
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
  c6:	8e e0       	ldi	r24, 0x0E	; 14
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
  d6:	80 e8       	ldi	r24, 0x80	; 128
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 41 00 	call	0x82	; 0x82 <LCD_CmdWrite>
  de:	08 95       	ret

000000e0 <LCD_DataWrite>:
  e0:	85 bb       	out	0x15, r24	; 21
  e2:	82 b3       	in	r24, 0x12	; 18
  e4:	80 62       	ori	r24, 0x20	; 32
  e6:	82 bb       	out	0x12, r24	; 18
  e8:	82 b3       	in	r24, 0x12	; 18
  ea:	8f 7b       	andi	r24, 0xBF	; 191
  ec:	82 bb       	out	0x12, r24	; 18
  ee:	82 b3       	in	r24, 0x12	; 18
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	00 00       	nop
  f6:	82 b3       	in	r24, 0x12	; 18
  f8:	8f 77       	andi	r24, 0x7F	; 127
  fa:	82 bb       	out	0x12, r24	; 18
  fc:	89 ef       	ldi	r24, 0xF9	; 249
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <LCD_DataWrite+0x20>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCD_DataWrite+0x26>
 106:	00 00       	nop
 108:	08 95       	ret

0000010a <LCD_DisplayString>:
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	ec 01       	movw	r28, r24
 110:	03 c0       	rjmp	.+6      	; 0x118 <LCD_DisplayString+0xe>
 112:	21 96       	adiw	r28, 0x01	; 1
 114:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_DataWrite>
 118:	88 81       	ld	r24, Y
 11a:	81 11       	cpse	r24, r1
 11c:	fa cf       	rjmp	.-12     	; 0x112 <LCD_DisplayString+0x8>
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <main>:

int main(void)
{
    /* Replace with your application code */
	char *say_hello = "Hello world"; 
	LCD_Init();
 124:	0e 94 56 00 	call	0xac	; 0xac <LCD_Init>
	LCD_DisplayString(say_hello);
 128:	80 e6       	ldi	r24, 0x60	; 96
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_DisplayString>
 130:	ff cf       	rjmp	.-2      	; 0x130 <main+0xc>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
