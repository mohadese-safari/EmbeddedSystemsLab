
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000018a  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006a  0080006a  00000228  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000066f  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b3  00000000  00000000  0000093b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000023b  00000000  00000000  00000eee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033a  00000000  00000000  000011dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000114  00000000  00000000  00001516  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000162a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e8       	ldi	r30, 0x8A	; 138
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  8a:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
	TCNT1 = timer1_initial_value;	
		rotate();
		PORTA = states[state];
}

ISR(INT0_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	direction *=-1;
  a0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <direction>
  a4:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <direction+0x1>
  a8:	91 95       	neg	r25
  aa:	81 95       	neg	r24
  ac:	91 09       	sbc	r25, r1
  ae:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <direction+0x1>
  b2:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <direction>
}
  b6:	9f 91       	pop	r25
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <main>:

int main(void)
{
	direction = 1;
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <direction+0x1>
  cc:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <direction>
	DDRA = 0xFF;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0 ;
  d4:	14 ba       	out	0x14, r1	; 20
	//TCCR0 = (1<<CS00);
	TCCR1B = (1<<CS11);
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << TOIE1) | (1 << TOIE0); // Enable Timer1 & Timer2 OverFlow Interrupt
  da:	89 b7       	in	r24, 0x39	; 57
  dc:	85 60       	ori	r24, 0x05	; 5
  de:	89 bf       	out	0x39, r24	; 57
	GICR |= (1 << INT0);
  e0:	8b b7       	in	r24, 0x3b	; 59
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01);
  e6:	85 b7       	in	r24, 0x35	; 53
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	85 bf       	out	0x35, r24	; 53
	sei();
  ec:	78 94       	sei
  ee:	ff cf       	rjmp	.-2      	; 0xee <main+0x2a>

000000f0 <rotate>:
    {		
    }
}

void rotate(){
	state = (state+direction)% 4;
  f0:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <__data_end>
  f4:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <__data_end+0x1>
  f8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <direction>
  fc:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <direction+0x1>
 100:	82 0f       	add	r24, r18
 102:	93 1f       	adc	r25, r19
 104:	83 70       	andi	r24, 0x03	; 3
 106:	90 78       	andi	r25, 0x80	; 128
 108:	99 23       	and	r25, r25
 10a:	24 f4       	brge	.+8      	; 0x114 <rotate+0x24>
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	8c 6f       	ori	r24, 0xFC	; 252
 110:	9f 6f       	ori	r25, 0xFF	; 255
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 118:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 11c:	08 95       	ret

0000011e <__vector_8>:
int state;
int direction;
int timer1_initial_value = 65535 - 65000;
void rotate();

ISR(TIMER1_OVF_vect){
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	5f 93       	push	r21
 130:	6f 93       	push	r22
 132:	7f 93       	push	r23
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31
	TCNT1 = timer1_initial_value;	
 140:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 144:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 148:	9d bd       	out	0x2d, r25	; 45
 14a:	8c bd       	out	0x2c, r24	; 44
		rotate();
 14c:	0e 94 78 00 	call	0xf0	; 0xf0 <rotate>
		PORTA = states[state];
 150:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
 154:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <__data_end+0x1>
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	ee 59       	subi	r30, 0x9E	; 158
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	80 81       	ld	r24, Z
 162:	8b bb       	out	0x1b, r24	; 27
}
 164:	ff 91       	pop	r31
 166:	ef 91       	pop	r30
 168:	bf 91       	pop	r27
 16a:	af 91       	pop	r26
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	7f 91       	pop	r23
 172:	6f 91       	pop	r22
 174:	5f 91       	pop	r21
 176:	4f 91       	pop	r20
 178:	3f 91       	pop	r19
 17a:	2f 91       	pop	r18
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
